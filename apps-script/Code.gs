// See README for steps.
const PROP = PropertiesService.getScriptProperties();
const API_KEY = PROP.getProperty('API_KEY');
const SHEET = SpreadsheetApp.getActive();
const ok = (data) => ContentService.createTextOutput(JSON.stringify({ok:true, data})).setMimeType(ContentService.MimeType.JSON);
const err = (msg,code=400) => ContentService.createTextOutput(JSON.stringify({ok:false, error:msg, code})).setMimeType(ContentService.MimeType.JSON);
const sheet = (name) => SHEET.getSheetByName(name) || SHEET.insertSheet(name);
function needAuth(e){ const key = (e.parameter.key || (e.postData && e.postData.type==='application/json' && (JSON.parse(e.postData.contents||'{}').key))); return !API_KEY || key !== API_KEY; }
function readTable(sh){ const rng = sh.getDataRange().getValues(); if(rng.length<=1) return []; const [hdr,...rows]=rng; return rows.filter(r=>r.join('').trim()!=='').map(r=>{const o={}; hdr.forEach((h,i)=>o[String(h).trim()]=r[i]); return o;}); }
function header(sh){ return sh.getRange(1,1,1, sh.getLastColumn()).getValues()[0]; }
function writeRow(sh, obj){ const hdr=header(sh); const row = hdr.map(h=>obj[h]); sh.appendRow(row); }
function updateCell(sh, findCol, findVal, col, val){ const rng = sh.getDataRange().getValues(); const hdr=rng[0]; const iFind=hdr.indexOf(findCol), iSet=hdr.indexOf(col); for(let i=1;i<rng.length;i++){ if(String(rng[i][iFind]).toLowerCase()===String(findVal).toLowerCase()){ sh.getRange(i+1,iSet+1).setValue(val); return true; } } return false; }
function doGet(e){ if(needAuth(e)) return err('Unauthorized',401); const action=e.parameter.action||'bootstrap'; if(action==='bootstrap'){ const items=readTable(sheet('items')); const suppliers=readTable(sheet('suppliers')); const settingsRows=readTable(sheet('settings')); const settings={}; settingsRows.forEach(r=>settings[String(r.name)]=r.value); return ok({items,suppliers,settings}); } if(action==='items') return ok(readTable(sheet('items'))); if(action==='sales'){ const from=e.parameter.from||'0000-00-00'; const to=e.parameter.to||'9999-12-31'; const all=readTable(sheet('sales')); const data=all.filter(s=>{ const d=String(s.date).slice(0,10); return d>=from && d<=to; }); return ok(data); } if(action==='suppliers') return ok(readTable(sheet('suppliers'))); return err('Unknown action'); }
function doPost(e){ if(needAuth(e)) return err('Unauthorized',401); const body=e.postData&&e.postData.type==='application/json'?JSON.parse(e.postData.contents||'{}'):{}; const action=body.action;
  if(action==='login'){ const {username,password}=body; const users=readTable(sheet('users')); const u=users.find(x=>String(x.username)===String(username)&&String(x.password)===String(password)); if(!u) return err('Invalid credentials',403); return ok({username:u.username, role:u.role}); }
  if(action==='sale'){ const lock=LockService.getScriptLock(); lock.tryLock(30000); try{ const sale=body.sale||{}; const lines=sale.lines||[]; if(!lines.length) return err('Empty cart'); const sh=sheet('items'); const items=readTable(sh); for(const L of lines){ const it=items.find(i=>String(i.sku).toLowerCase()===String(L.sku).toLowerCase()); if(!it) return err(`Item not found: ${L.sku}`); if(Number(it.stock||0)<Number(L.qty||0)) return err(`Insufficient stock for ${L.sku}`); } for(const L of lines){ const it=items.find(i=>String(i.sku).toLowerCase()===String(L.sku).toLowerCase()); const newSt=Number(it.stock||0)-Number(L.qty||0); updateCell(sh,'sku',it.sku,'stock',newSt); } writeRow(sheet('sales'),{date:new Date(), invoice:sale.invoice, cashier:sale.cashier, subtotal:sale.subtotal, discount:sale.discount, vatp:sale.vatp, vat:sale.vat, total:sale.total, lines_json:JSON.stringify(lines)}); return ok({success:true}); } finally { lock.releaseLock(); } }
  if(action==='receiveStock'){ const {supplier,sku,qty}=body; if(!sku||!qty) return err('Missing sku/qty'); const sh=sheet('items'); const items=readTable(sh); const it=items.find(i=>String(i.sku).toLowerCase()===String(sku).toLowerCase()); if(!it) return err('Unknown SKU'); const newSt=Number(it.stock||0)+Number(qty||0); updateCell(sh,'sku',it.sku,'stock',newSt); writeRow(sheet('grns'),{date:new Date(), supplier, sku:it.sku, qty:Number(qty)}); return ok({success:true, stock:newSt}); }
  if(action==='addSupplier'){ const {name,phone,email}=body; if(!name) return err('Supplier name required'); writeRow(sheet('suppliers'),{name,phone,email}); return ok({success:true}); }
  if(action==='upsertItem'){ const it=body.item; if(!it||!it.sku) return err('SKU required'); const sh=sheet('items'); const items=readTable(sh); const exists=items.find(i=>String(i.sku).toLowerCase()===String(it.sku).toLowerCase()); if(exists){ Object.keys(it).forEach(k=>updateCell(sh,'sku',exists.sku,k,it[k])); } else { writeRow(sh,it); } return ok({success:true}); }
  return err('Unknown action'); }
